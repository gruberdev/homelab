version: '3'
vars:
  CYAN: tput setaf 6
  RED: tput setaf 1
  YELLOW: tput setaf 3
  GREEN: tput setaf 2
  BLUE: tput setaf 1
  PURPLE: tput setaf 5
  BG_B: tput setab 0
  BOLD: tput bold
  RESET: tput sgr0
  CLEAR: tput reset
  PATH_ERROR: is not installed or correctly configured in PATH.
env:
  VERSION: "1.3.1"

silent: true

# Thanks https://avasdream.engineer/kubernetes-longhorn-stuck-terminating

tasks:

  uninstall:yaml:
    cmds:
      - kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v${VERSION}/deploy/longhorn.yaml

  uninstall:helm:
    cmds:
      - helm uninstall longhorn -n longhorn-system

  uninstall:deploy:
    cmds:
      - kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v${VERSION}/uninstall/uninstall.yaml

  uninstall:remove:
    cmds:
      - kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v${VERSION}/uninstall/uninstall.yaml

  delete:crds:
    cmds:
      - bash
      - |
        for crd in $(kubectl get crd -o jsonpath={.items[*].metadata.name} | tr ' ' '\n' | grep longhorn.rancher.io); do
        kubectl -n ${NAMESPACE} get $crd -o yaml | sed "s/\- longhorn.rancher.io//g" | kubectl apply -f -
        kubectl -n ${NAMESPACE} delete $crd --all
        kubectl delete crd/$crd
        done

  list:resources:
    cmds:
      - kubectl api-resources --verbs=list --namespaced -o name | xargs -n 1 kubectl get --show-kind --ignore-not-found -n longhorn-system

  patch:resources:
    cmds:
      - for crd in $(kubectl get crd -o name | grep longhorn); do kubectl patch $crd -p '{"metadata":{"finalizers":[]}}' --type=merge; done;

  destroy:all:
    cmds:
      - knsk --delete-all --force

  assign:
    cmds:
      - task: label:nodes
      - task: annotate:nodes

  label:nodes:
    cmds:
      - kubectl label node node-one node.longhorn.io/create-default-disk='config'
      - kubectl label node node-two node.longhorn.io/create-default-disk='config'

  annotate:nodes:
    cmds:
      - |
        kubectl annotate node node-one \
        node.longhorn.io/default-disks-config='[{"path":"/mnt/storage","allowScheduling":true}]'
      - |
        kubectl annotate node node-two \
        node.longhorn.io/default-disks-config='[{"path":"/media/k3s/longhorn","allowScheduling":true}]'

  install:helm:
    cmds:
      - |
        cat << EOF > config/values.yaml
        global:
          cattle:
            systemDefaultRegistry: ""
            windowsCluster:
              enabled: false
        image:
          longhorn:
            engine:
              repository: longhornio/longhorn-engine
              tag: v1.3.1
            manager:
              repository: longhornio/longhorn-manager
              tag: v1.3.1
            ui:
              repository: longhornio/longhorn-ui
              tag: v1.3.1
            instanceManager:
              repository: longhornio/longhorn-instance-manager
              tag: v1_20220808
            shareManager:
              repository: longhornio/longhorn-share-manager
              tag: v1_20220808
            backingImageManager:
              repository: longhornio/backing-image-manager
              tag: v3_20220808
          csi:
            attacher:
              repository: longhornio/csi-attacher
              tag: v3.4.0
            provisioner:
              repository: longhornio/csi-provisioner
              tag: v2.1.2
            nodeDriverRegistrar:
              repository: longhornio/csi-node-driver-registrar
              tag: v2.5.0
            resizer:
              repository: longhornio/csi-resizer
              tag: v1.2.0
            snapshotter:
              repository: longhornio/csi-snapshotter
              tag: v3.0.3
          pullPolicy: IfNotPresent
        service:
          ui:
            type: ClusterIP
            nodePort: null
          manager:
            type: ClusterIP
            nodePort: ""
        persistence:
          defaultClass: true
          defaultFsType: ext4
          defaultClassReplicaCount: 1
          reclaimPolicy: Delete
          migratable: false
          recurringJobSelector:
            enable: false
            jobList: []
          backingImage:
            enable: false
            name: ~
            dataSourceType: ~
            dataSourceParameters: ~
            expectedChecksum: ~
        csi:
          kubeletRootDir: ~
          attacherReplicaCount: ~
          provisionerReplicaCount: ~
          resizerReplicaCount: ~
          snapshotterReplicaCount: ~
        defaultSettings:
          backupTarget: ~
          backupTargetCredentialSecret: ~
          allowRecurringJobWhileVolumeDetached: ~
          createDefaultDiskLabeledNodes: true
          defaultDataPath: ~
          defaultDataLocality: ~
          replicaSoftAntiAffinity: ~
          replicaAutoBalance: ~
          storageOverProvisioningPercentage: ~
          storageMinimalAvailablePercentage: ~
          upgradeChecker: ~
          defaultReplicaCount: ~
          defaultLonghornStaticStorageClass: ~
          backupstorePollInterval: ~
          taintToleration: ~
          systemManagedComponentsNodeSelector: ~
          priorityClass: ~
          autoSalvage: ~
          autoDeletePodWhenVolumeDetachedUnexpectedly: ~
          disableSchedulingOnCordonedNode: ~
          replicaZoneSoftAntiAffinity: ~
          nodeDownPodDeletionPolicy: ~
          allowNodeDrainWithLastHealthyReplica: ~
          mkfsExt4Parameters: ~
          disableReplicaRebuild: ~
          replicaReplenishmentWaitInterval: ~
          concurrentReplicaRebuildPerNodeLimit: ~
          disableRevisionCounter: ~
          systemManagedPodsImagePullPolicy: ~
          allowVolumeCreationWithDegradedAvailability: ~
          autoCleanupSystemGeneratedSnapshot: ~
          concurrentAutomaticEngineUpgradePerNodeLimit: ~
          backingImageCleanupWaitInterval: ~
          backingImageRecoveryWaitInterval: ~
          guaranteedEngineManagerCPU: ~
          guaranteedReplicaManagerCPU: ~
          kubernetesClusterAutoscalerEnabled: ~
          orphanAutoDeletion: ~
          storageNetwork: ~
        privateRegistry:
          createSecret: ~
          registryUrl: ~
          registryUser: ~
          registryPasswd: ~
          registrySecret: ~
        longhornManager:
          priorityClass: ~
          tolerations: []
        longhornDriver:
          priorityClass: ~
          tolerations: []
          nodeSelector: {}
        longhornUI:
          replicas: 1
          priorityClass: ~
          tolerations: []
          nodeSelector:
            kubernetes.io/hostname: node-two
        resources:
          limits:
            cpu: 200m
            memory: 256Mi
          requests:
            cpu: 100m
            memory: 128Mi
        ingress:
          enabled: false
        enablePSP: true
        namespaceOverride: "longhorn-system"
        # Annotations to add to the Longhorn Manager DaemonSet Pods. Optional.
        annotations: {}
        serviceAccount:
          annotations: {}
        EOF
      - |
        helm install longhorn longhorn/longhorn \
        --namespace longhorn-system \
        --values config/values.yaml --version "1.3.1"
      - rm config/values.yaml

  clean:all:
    cmds:
      - kubectl delete mutatingwebhookconfiguration.admissionregistration.k8s.io/longhorn-webhook-mutator
      - kubectl delete validatingwebhookconfiguration.admissionregistration.k8s.io/longhorn-webhook-validator
      - kubectl delete storageclass.storage.k8s.io/longhorn
