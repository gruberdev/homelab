version: '3'
vars:
  CYAN: tput setaf 6
  RED: tput setaf 1
  YELLOW: tput setaf 3
  GREEN: tput setaf 2
  BLUE: tput setaf 1
  PURPLE: tput setaf 5
  BG_B: tput setab 0
  BOLD: tput bold
  RESET: tput sgr0
  CLEAR: tput reset
  PATH_ERROR: is not installed or correctly configured in PATH.
  TAILSCALE_VERSION: 1.34.1-2

silent: true

tasks:
  router:
    vars:
      SVC_CIDR:
        sh: echo "$(echo '{"apiVersion":"v1","kind":"Service","metadata":{"name":"tst"},"spec":{"clusterIP":"1.1.1.1","ports":[{"port":443}]}}' | kubectl apply -f - 2>&1 | sed 's/.*valid IPs is //')"
      POD_CIDR:
        sh: echo "$(kubectl get nodes -o jsonpath='{.items[*].spec.podCIDR}')"
    cmds:
      - rm apps/networking/router/deployment.yaml
      - |
        cat << EOF > apps/networking/router/deployment.yaml
        apiVersion: v1
        kind: Deployment
        metadata:
          name: subnet-router
          labels:
            app: tailscale
        spec:
          selector:
            matchLabels:
              app: subnet-router
          replicas: 1
          template:
            metadata:
              labels:
                app: subnet-router
          serviceAccountName: "tailscale"
          containers:
          - name: tailscale
            imagePullPolicy: IfNotPresent
            image: "docker.io/grubertech/tailscale:latest"
            env:
          - name: TS_HOSTNAME
            value: "router"
            - name: USERSPACE
              value: "true"
            - name: AUTH_KEY
              valueFrom:
                secretKeyRef:
                  name: tailscale
                  key: AUTH_KEY
                  optional: true
            - name: ROUTES
              value: "{{.SVC_CIDR}},{{.POD_CIDR}}"
            securityContext:
              runAsUser: 1000
              runAsGroup: 1000
        EOF
    ignore_error: true

  secret:
    cmds:
      - |
        kubectl apply -f - << EOF
        apiVersion: v1
        kind: Secret
        metadata:
          name: operator-oauth
          namespace: tailscale
          annotations:
            reflector.v1.k8s.emberstack.com/reflection-allowed: "true"
            reflector.v1.k8s.emberstack.com/reflection-auto-enabled: "true"
            reflector.v1.k8s.emberstack.com/reflection-allowed-namespaces: ""
        stringData:
          client_id: $TAILSCALE_OAUTH2_CLIENT_ID
          client_secret: $TAILSCALE_OAUTH2_CLIENT_SECRET
        EOF
    ignore_error: true

  sidecar:
    cmds:
      - task: sidecar:build
      - task: sidecar:push

  operator:
    dir: apps/networking/tailscale/operator
    preconditions:
      - sh: 'which kustomize'
        msg: 'kustomize {{.PATH_ERROR}}'
      - sh: 'which kubectl'
        msg: 'kubectl {{.PATH_ERROR}}'
    cmds:
      - kubectl create namespace tailscale
      - kustomize build | kubectl apply -f -
      - task: secret
      - echo "Patched secret."
    ignore_error: true

  sidecar:build:
    dir: apps/networking/tailscale/docker
    cmds:
      - |
        docker build -t docker.io/grubertech/tailscale:latest \
                     -t docker.io/grubertech/tailscale:v{{.TAILSCALE_VERSION}} \
                     -t docker.io/grubertech/tailscale-sidecar:v{{.TAILSCALE_VERSION}} .
    ignore_error: true

  sidecar:push:
    dir: apps/networking/tailscale/docker
    cmds:
      - docker push docker.io/grubertech/tailscale:latest
      - docker push docker.io/grubertech/tailscale:v{{.TAILSCALE_VERSION}}
      - docker push docker.io/grubertech/tailscale-sidecar:v{{.TAILSCALE_VERSION}}
    ignore_error: true
