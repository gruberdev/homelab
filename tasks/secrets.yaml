version: '3'
vars:
  CYAN: tput setaf 6
  RED: tput setaf 1
  YELLOW: tput setaf 3
  GREEN: tput setaf 2
  BLUE: tput setaf 1
  PURPLE: tput setaf 5
  BG_B: tput setab 0
  BOLD: tput bold
  RESET: tput sgr0
  CLEAR: tput reset
  PATH_ERROR: is not installed or correctly configured in PATH.

silent: true

tasks:
  n8n:
    cmds:
      - rm test/n8n-secret.yaml
      - |
        cat << EOF > test/n8n-secret.yaml
        apiVersion: v1
        kind: Secret
        metadata:
          name: n8n-vars
          namespace: services
        stringData:
          N8N_SMTP_HOST: "$N8N_SMTP_HOST"
          N8N_SMTP_PORT: "$N8N_SMTP_PORT"
          N8N_SMTP_USER: "$N8N_SMTP_USER"
          N8N_SMTP_PASS: "$N8N_SMTP_PASS"
          N8N_BASIC_AUTH_USER: "$N8N_BASIC_AUTH_USER"
          N8N_BASIC_AUTH_PASSWORD: "$N8N_BASIC_AUTH_PASSWORD"
          N8N_ENCRYPTION_KEY: $N8N_ENCRYPTION_KEY
          DB_POSTGRESDB_DATABASE: "$DB_POSTGRESDB_DATABASE"
          DB_POSTGRESDB_HOST: "$DB_POSTGRESDB_HOST"
          DB_POSTGRESDB_PORT: "$DB_POSTGRESDB_PORT"
          DB_POSTGRESDB_USER: "$DB_POSTGRESDB_USER"
          DB_POSTGRESDB_PASSWORD: "$DB_POSTGRESDB_PASSWORD"
        EOF
      - kubectl apply -f test/n8n-secret.yaml
      - rm test/n8n-secret.yaml
    ignore_error: true

  kuma:
    cmds:
      - rm test/kuma-secret.yaml
      - |
        cat << EOF > test/kuma-secret.yaml
        apiVersion: v1
        kind: Secret
        metadata:
          name: kuma-vars
          namespace: monitoring
        stringData:
          UPTIME_KUMA_CLOUDFLARED_TOKEN: "$UPTIME_KUMA_CLOUDFLARED_TOKEN"
        EOF
      - kubectl apply -f test/kuma-secret.yaml
      - rm test/kuma-secret.yaml
    ignore_error: true

  flame:
    cmds:
      - rm test/flame-secret.yaml
      - |
        cat << EOF > test/flame-secret.yaml
        apiVersion: v1
        kind: Secret
        metadata:
          name: flame-vars
          namespace: monitoring
        stringData:
          PASSWORD: "$FLAME_PASSWORD"
        EOF
      - kubectl apply -f test/flame-secret.yaml
      - rm test/flame-secret.yaml
    ignore_error: true

  poller:
    cmds:
      - rm test/poller-secret.yaml
      - |
        cat << EOF > test/poller-secret.yaml
        apiVersion: v1
        kind: Secret
        metadata:
          name: unifi-poller-vars
          namespace: unifi
        stringData:
          UP_UNIFI_DEFAULT_URL: "$UP_UNIFI_DEFAULT_URL"
          UP_UNIFI_DEFAULT_USER: "$UP_UNIFI_DEFAULT_USER"
          UP_UNIFI_DEFAULT_PASS: "$UP_UNIFI_DEFAULT_PASS"
        EOF
      - kubectl apply -f test/poller-secret.yaml
      - rm test/poller-secret.yaml
    ignore_error: true

  cloudflare:
    cmds:
      - rm test/cloudflare.yaml
      - |
        cat << EOF > test/cloudflare.yaml
        apiVersion: v1
        kind: Secret
        metadata:
          name: cloudflared-vars
          namespace: kube-system
          annotations:
            reflector.v1.k8s.emberstack.com/reflection-allowed: "true"
            reflector.v1.k8s.emberstack.com/reflection-auto-enabled: "true"
            reflector.v1.k8s.emberstack.com/reflection-allowed-namespaces: ""
        stringData:
          CLOUDFLARE_API_TOKEN: "$CLOUDFLARE_API_TOKEN"
          CLOUDFLARE_API_KEY: "$CLOUDFLARE_API_KEY"
        EOF
      - kubectl apply -f test/cloudflare.yaml
      - rm test/cloudflare.yaml
    ignore_error: true

  certmanager:
    cmds:
      - rm test/cloudflare-cert.yaml
      - |
        cat << EOF > test/cloudflare-cert.yaml
        apiVersion: v1
        kind: Secret
        metadata:
          name: certmanager-vars
          namespace: cert-manager
        stringData:
          api-token: "$CLOUDFLARE_API_TOKEN"
        EOF
      - kubectl apply -f test/cloudflare-cert.yaml
      - rm test/cloudflare-cert.yaml
    ignore_error: true

  gen:
    cmds:
      - task: n8n
      - task: kuma
      - task: flame
      - task: poller
      - task: cloudflare
      - task: certmanager
