version: '3'
vars:
  CYAN: tput setaf 6
  RED: tput setaf 1
  YELLOW: tput setaf 3
  GREEN: tput setaf 2
  BLUE: tput setaf 1
  PURPLE: tput setaf 5
  BG_B: tput setab 0
  BOLD: tput bold
  RESET: tput sgr0
  CLEAR: tput reset
  PATH_ERROR: is not installed or correctly configured in PATH.

silent: true

tasks:
  n8n:
    cmds:
      - rm test/n8n-secret.yaml
      - |
        cat << EOF > test/n8n-secret.yaml
        apiVersion: v1
        kind: Secret
        metadata:
          name: n8n-vars
          namespace: services
        stringData:
          N8N_SMTP_HOST: "$N8N_SMTP_HOST"
          N8N_SMTP_PORT: "$N8N_SMTP_PORT"
          N8N_SMTP_USER: "$N8N_SMTP_USER"
          N8N_SMTP_PASS: "$N8N_SMTP_PASS"
          N8N_BASIC_AUTH_USER: "$N8N_BASIC_AUTH_USER"
          N8N_BASIC_AUTH_PASSWORD: "$N8N_BASIC_AUTH_PASSWORD"
          N8N_ENCRYPTION_KEY: $N8N_ENCRYPTION_KEY
          DB_POSTGRESDB_DATABASE: "$DB_POSTGRESDB_DATABASE"
          DB_POSTGRESDB_HOST: "$DB_POSTGRESDB_HOST"
          DB_POSTGRESDB_PORT: "$DB_POSTGRESDB_PORT"
          DB_POSTGRESDB_USER: "$DB_POSTGRESDB_USER"
          DB_POSTGRESDB_PASSWORD: "$DB_POSTGRESDB_PASSWORD"
        EOF
      - kubectl apply -f test/n8n-secret.yaml
      - rm test/n8n-secret.yaml
    ignore_error: true

  kuma:
    cmds:
      - rm test/kuma-secret.yaml
      - |
        cat << EOF > test/kuma-secret.yaml
        apiVersion: v1
        kind: Secret
        metadata:
          name: kuma-vars
          namespace: monitoring
        stringData:
          UPTIME_KUMA_CLOUDFLARED_TOKEN: "$UPTIME_KUMA_CLOUDFLARED_TOKEN"
        EOF
      - kubectl apply -f test/kuma-secret.yaml
      - rm test/kuma-secret.yaml
    ignore_error: true

  flame:
    cmds:
      - rm test/flame-secret.yaml
      - |
        cat << EOF > test/flame-secret.yaml
        apiVersion: v1
        kind: Secret
        metadata:
          name: flame-vars
          namespace: monitoring
        stringData:
          PASSWORD: "$FLAME_PASSWORD"
        EOF
      - kubectl apply -f test/flame-secret.yaml
      - rm test/flame-secret.yaml
    ignore_error: true

  poller:
    cmds:
      - rm test/poller-secret.yaml
      - |
        cat << EOF > test/poller-secret.yaml
        apiVersion: v1
        kind: Secret
        metadata:
          name: unifi-poller-vars
          namespace: unifi
        stringData:
          UP_UNIFI_DEFAULT_URL: "$UP_UNIFI_DEFAULT_URL"
          UP_UNIFI_DEFAULT_USER: "$UP_UNIFI_DEFAULT_USER"
          UP_UNIFI_DEFAULT_PASS: "$UP_UNIFI_DEFAULT_PASS"
        EOF
      - kubectl apply -f test/poller-secret.yaml
      - rm test/poller-secret.yaml
    ignore_error: true

  botkube:
    cmds:
      - rm test/botkube-secret.yaml
      - |
        cat << EOF > test/botkube-secret.yaml
        apiVersion: v1
        kind: Secret
        metadata:
          name: botkube-vars
          namespace: monitoring
        stringData:
          comm_config.yaml: |
            communications:
              'default-group':
                discord:
                  enabled: true
                  token: '$DISCORD_TOKEN'
                  botID: '$DISCORD_BOT_ID'
                  channels:
                    'kube-notifications':
                      id: '$DISCORD_CHANNEL_ID'
                      bindings:
                        executors:
                          - kubectl-read-only
                        sources:
                          - k8s-events
                  notification:
                    type: long
        EOF
      - kubectl apply -f test/botkube-secret.yaml
      - rm test/botkube-secret.yaml
    ignore_error: true

  kubeconfig:
    vars:
      KUBE:
        sh: cat $KUBECONFIG
    cmds:
      - rm test/kubeconfig-secret.yaml
      - |
        cat << EOF > test/kubeconfig-secret.yaml
        apiVersion: v1
        kind: Secret
        metadata:
          name: botkube-kubeconfig
          namespace: monitoring
        data:
          config: {{ .KUBE | b64enc }}
        EOF
      - kubectl apply -f test/kubeconfig-secret.yaml
      - rm test/kubeconfig-secret.yaml
    ignore_error: true

  wakapi:
    cmds:
      - rm test/wakapi-secret.yaml
      - |
        cat << EOF > test/wakapi-secret.yaml
        apiVersion: v1
        kind: Secret
        metadata:
          name: wakapi-vars
          namespace: services
        stringData:
          WAKAPI_PASSWORD_SALT: "$WAKAPI_PASSWORD_SALT"
          WAKAPI_DB_HOST: "$WAKAPI_DB_HOST"
          WAKAPI_DB_PORT: "$WAKAPI_DB_PORT"
          WAKAPI_DB_USER: "$WAKAPI_DB_USER
          WAKAPI_DB_PASSWORD: "$WAKAPI_DB_PASSWORD"
          WAKAPI_DB_NAME: "$WAKAPI_DB_NAME"
          WAKAPI_MAIL_SENDER: "$WAKAPI_MAIL_SENDER"
          WAKAPI_MAIL_SMTP_HOST: "$WAKAPI_MAIL_SMTP_HOST"
          WAKAPI_MAIL_SMTP_PORT: "$WAKAPI_MAIL_SMTP_PORT"
          WAKAPI_MAIL_SMTP_USER: "$WAKAPI_MAIL_SMTP_USER"
          WAKAPI_MAIL_SMTP_PASS: "$WAKAPI_MAIL_SMTP_PASS"
        EOF
      - kubectl apply -f test/wakapi-secret.yaml
      - rm test/wakapi-secret.yaml
    ignore_error: true

  rss:gen:
    cmds:
      - rm test/rssgen-secret.yaml
      - |
        cat << EOF > test/rssgen-secret.yaml
        apiVersion: v1
        kind: Secret
        metadata:
          name: rssgen-vars
          namespace: rss
        stringData:
          TOKEN_SECRET: "$RSS_GEN_TOKEN_SECRET"
        EOF
      - kubectl apply -f test/rssgen-secret.yaml
      - rm test/rssgen-secret.yaml
    ignore_error: true

  rss:hub:
    cmds:
      - rm test/rsshub-secret.yaml
      - |
        cat << EOF > test/rsshub-secret.yaml
        apiVersion: v1
        kind: Secret
        metadata:
          name: rsshub-vars
          namespace: rss
        stringData:
          HTTP_BASIC_AUTH_NAME: "$RSS_HUB_USERNAME"
          HTTP_BASIC_AUTH_PASS: "$RSS_HUB_PASSWORD"
        EOF
      - kubectl apply -f test/rsshub-secret.yaml
      - rm test/rsshub-secret.yaml
    ignore_error: true

  gen:
    cmds:
      - task: n8n
      - task: kuma
      - task: flame
      - task: poller
      - task: botkube
      - task: kubeconfig
      - task: wakapi
      - task: rss:gen
      - task: rss:hub
