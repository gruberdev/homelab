version: '3'
vars:
  CYAN: tput setaf 6
  RED: tput setaf 1
  YELLOW: tput setaf 3
  GREEN: tput setaf 2
  BLUE: tput setaf 1
  PURPLE: tput setaf 5
  BG_B: tput setab 0
  BOLD: tput bold
  RESET: tput sgr0
  CLEAR: tput reset
  PATH_ERROR: is not installed or correctly configured in PATH.

silent: true

tasks:
  n8n:
    cmds:
      - rm test/n8n-secret.yaml
      - |
        cat << EOF > test/n8n-secret.yaml
        apiVersion: v1
        kind: Secret
        metadata:
          name: n8n-vars
          namespace: services
        stringData:
          N8N_SMTP_HOST: "$SMTP_HOST"
          N8N_SMTP_PORT: "$SMTP_PORT"
          N8N_SMTP_USER: "$SMTP_USER"
          N8N_SMTP_PASS: "$SMTP_PASS"
          N8N_BASIC_AUTH_USER: "$N8N_BASIC_AUTH_USER"
          N8N_BASIC_AUTH_PASSWORD: "$N8N_BASIC_AUTH_PASSWORD"
          N8N_ENCRYPTION_KEY: "$N8N_ENCRYPTION_KEY"
          DB_POSTGRESDB_DATABASE: "$DB_POSTGRESDB_DATABASE"
          DB_POSTGRESDB_HOST: "$DB_POSTGRESDB_HOST"
          DB_POSTGRESDB_PORT: "$DB_POSTGRESDB_PORT"
        EOF
      - kubectl apply -f test/n8n-secret.yaml
      - rm test/n8n-secret.yaml
    ignore_error: true

  kuma:
    cmds:
      - rm test/kuma-secret.yaml
      - |
        cat << EOF > test/kuma-secret.yaml
        apiVersion: v1
        kind: Secret
        metadata:
          name: kuma-vars
          namespace: monitoring
        stringData:
          UPTIME_KUMA_CLOUDFLARED_TOKEN: "$UPTIME_KUMA_CLOUDFLARED_TOKEN"
        EOF
      - kubectl apply -f test/kuma-secret.yaml
      - rm test/kuma-secret.yaml
    ignore_error: true

  flame:
    cmds:
      - rm test/flame-secret.yaml
      - |
        cat << EOF > test/flame-secret.yaml
        apiVersion: v1
        kind: Secret
        metadata:
          name: flame-vars
          namespace: monitoring
        stringData:
          PASSWORD: "$FLAME_PASSWORD"
        EOF
      - kubectl apply -f test/flame-secret.yaml
      - rm test/flame-secret.yaml
    ignore_error: true

  poller:
    cmds:
      - rm test/poller-secret.yaml
      - |
        cat << EOF > test/poller-secret.yaml
        apiVersion: v1
        kind: Secret
        metadata:
          name: unifi-poller-vars
          namespace: unifi
        stringData:
          UP_UNIFI_DEFAULT_URL: "$UP_UNIFI_DEFAULT_URL"
          UP_UNIFI_DEFAULT_USER: "$UP_UNIFI_DEFAULT_USER"
          UP_UNIFI_DEFAULT_PASS: "$UP_UNIFI_DEFAULT_PASS"
        EOF
      - kubectl apply -f test/poller-secret.yaml
      - rm test/poller-secret.yaml
    ignore_error: true

  botkube:
    cmds:
      - rm test/botkube-secret.yaml
      - |
        cat << EOF > test/botkube-secret.yaml
        apiVersion: v1
        kind: Secret
        metadata:
          name: botkube-vars
          namespace: monitoring
        stringData:
          comm_config.yaml: |
            communications:
              'default-group':
                discord:
                  enabled: true
                  token: '$DISCORD_TOKEN'
                  botID: '$DISCORD_BOT_ID'
                  channels:
                    'kube-notifications':
                      id: '$DISCORD_CHANNEL_ID'
                      bindings:
                        executors:
                          - kubectl-read-only
                        sources:
                          - k8s-events
                  notification:
                    type: long
        EOF
      - kubectl apply -f test/botkube-secret.yaml
      - rm test/botkube-secret.yaml
    ignore_error: true

  kubeconfig:
    vars:
      KUBE:
        sh: cat $KUBECONFIG
    cmds:
      - rm test/kubeconfig-secret.yaml
      - |
        cat << EOF > test/kubeconfig-secret.yaml
        apiVersion: v1
        kind: Secret
        metadata:
          name: botkube-kubeconfig
          namespace: monitoring
        data:
          config: {{ .KUBE | b64enc }}
        EOF
      - kubectl apply -f test/kubeconfig-secret.yaml
      - rm test/kubeconfig-secret.yaml
    ignore_error: true

  wakapi:
    cmds:
      - rm test/wakapi-secret.yaml
      - |
        cat << EOF > test/wakapi-secret.yaml
        apiVersion: v1
        kind: Secret
        metadata:
          name: wakapi-vars
          namespace: services
        stringData:
          WAKAPI_PASSWORD_SALT: "$WAKAPI_PASSWORD_SALT"
          WAKAPI_DB_HOST: "$WAKAPI_DB_HOST"
          WAKAPI_DB_PORT: "$WAKAPI_DB_PORT"
          WAKAPI_DB_NAME: "$WAKAPI_DB_NAME"
          WAKAPI_MAIL_SENDER: "$WAKAPI_MAIL_SENDER"
          WAKAPI_MAIL_SMTP_HOST: "$SMTP_HOST"
          WAKAPI_MAIL_SMTP_PORT: "$SMTP_PORT"
          WAKAPI_MAIL_SMTP_USER: "$SMTP_USER"
          WAKAPI_MAIL_SMTP_PASS: "$SMTP_PASS"
        EOF
      - kubectl apply -f test/wakapi-secret.yaml
      - rm test/wakapi-secret.yaml
    ignore_error: true

  rss:gen:
    cmds:
      - rm test/rssgen-secret.yaml
      - |
        cat << EOF > test/rssgen-secret.yaml
        apiVersion: v1
        kind: Secret
        metadata:
          name: rssgen-vars
          namespace: rss
        stringData:
          TOKEN_SECRET: "$RSS_GEN_TOKEN_SECRET"
        EOF
      - kubectl apply -f test/rssgen-secret.yaml
      - rm test/rssgen-secret.yaml
    ignore_error: true

  rss:hub:
    cmds:
      - rm test/rsshub-secret.yaml
      - |
        cat << EOF > test/rsshub-secret.yaml
        apiVersion: v1
        kind: Secret
        metadata:
          name: rsshub-vars
          namespace: rss
        stringData:
          HTTP_BASIC_AUTH_NAME: "$RSS_HUB_USERNAME"
          HTTP_BASIC_AUTH_PASS: "$RSS_HUB_PASSWORD"
          ACCESS_KEY: "$RSS_HUB_ACCESSKEY"
          GITHUB_ACCESS_TOKEN: "$GH_PASS"
          GOOGLE_FONTS_API_KEY: "$GOOGLE_FONTS_API_KEY"
          IG_USERNAME: "$INSTAGRAM_USERNAME"
          IG_PASSWORD: "$INSTAGRAM_PASSWORD"
          IG_PROXY: "$INSTAGRAM_PROXY"
          LASTFM_API_KEY: "$LASTFM_API_KEY"
          SPOTIFY_CLIENT_ID: "$SPOTIFY_CLIENT_ID"
          SPOTIFY_REFRESHTOKEN: "$SPOTIFY_REFRESHTOKEN"
          YOUTUBE_KEY: "$YOUTUBE_KEY"
          YOUTUBE_CLIENT_ID: "$YOUTUBE_CLIENT_ID"
          YOUTUBE_CLIENT_SECRET: "$YOUTUBE_CLIENT_SECRET"
          YOUTUBE_REFRESH_TOKEN: "$YOUTUBE_REFRESH_TOKEN"
        EOF
      - kubectl apply -f test/rsshub-secret.yaml
      - rm test/rsshub-secret.yaml
    ignore_error: true

  wyze:
    cmds:
      - rm test/wyze-secret.yaml
      - |
        cat << EOF > test/wyze-secret.yaml
        apiVersion: v1
        kind: Secret
        metadata:
          name: wyze-vars
          namespace: homeassistant
        stringData:
          WYZE_EMAIL: "$WYZE_EMAIL"
          WYZE_PASSWORD: "$WYZE_PASSWORD"
          TOTP_KEY: "$WYZE_TOTP_KEY"
        EOF
      - kubectl apply -f test/wyze-secret.yaml
      - rm test/wyze-secret.yaml
    ignore_error: true

  metabase:
    cmds:
      - rm test/metabase-secret.yaml
      - |
        cat << EOF > test/metabase-secret.yaml
        apiVersion: v1
        kind: Secret
        metadata:
          name: metabase-vars
          namespace: services
        stringData:
          MB_DB_DBNAME: "$MB_DB_DBNAME"
          MB_DB_PORT: "$MB_DB_PORT"
          MB_DB_USER: "$MB_DB_USER"
          MB_DB_PASS: "$MB_DB_PASS"
          MB_ADMIN_EMAIL: "MB_ADMIN_EMAIL"
          MB_EMAIL_FROM_ADDRESS: "$MB_EMAIL_FROM_ADDRESS"
          MB_EMAIL_SMTP_HOST: "$SMTP_HOST"
          MB_EMAIL_SMTP_PASSWORD: "$SMTP_PASS"
          MB_EMAIL_SMTP_PORT: "$SMTP_PORT"
          MB_EMAIL_SMTP_USERNAME: "$SMTP_USER"
          MB_EMBEDDING_SECRET_KEY: "$MB_EMBEDDING_SECRET_KEY"
          MB_ENCRYPTION_SECRET_KEY: "$MB_ENCRYPTION_SECRET_KEY"
        EOF
      - kubectl apply -f test/metabase-secret.yaml
      - rm test/metabase-secret.yaml
    ignore_error: true

  argocd:
    cmds:
      - |
        PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d; echo) \
        argocd login --insecure --username admin --password ${PASSWORD} $ARGOCD_URI
      - argocd account generate-token --account image-updater --id image-updater > test/argo-token.yaml

  argocd:setup:
    - |
      PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d; echo) \
      argocd login --insecure --username admin --password ${PASSWORD} $ARGOCD_URI
    - argocd account update-password

  image-updater:
    vars:
      ARGOCD_TOKEN:
        sh: cat test/argo-token.yaml
    cmds:
      - rm test/argo-secret.yaml
      - |
        cat << EOF > test/argo-secret.yaml
        apiVersion: v1
        kind: Secret
        metadata:
          name: argocd-image-updater-secret
          namespace: argocd
          labels:
            app.kubernetes.io/name: argocd-image-updater-secret
            app.kubernetes.io/part-of: argocd-image-updater
        type: Opaque
        data:
          argocd.token:  "{{ .ARGOCD_TOKEN | b64enc }}"
        EOF
      - kubectl apply -f test/argo-secret.yaml
      - kubectl -n argocd rollout restart deployment argocd-image-updater
      - rm test/argo-secret.yaml
      - rm test-argo-token.yaml
    ignore_error: true

  ha:
    cmds:
      - rm test/ha-secret.yaml
      - |
        cat << EOF > test/ha-secret.yaml
        apiVersion: v1
        kind: Secret
        metadata:
          name: ha-secrets
          namespace: homeassistant
        type: Opaque
        stringData:
          secrets.yaml: |
            server_address: $INTERNAL_IPV4
            public_ip: $EXTERNAL_IPV4

            # Samsung
            tv_ipv4: $SAMSUNG_IPV4
            tv_mac: $SAMSUNG_MAC
            # Steam
            steam_api_key: $STEAM_API_KEY
            # LastFM
            lastfm_api_key: $LASTFM_API_KEY
            # IFTTT Integration
            ifttt_api_key: $IFTTT_API_KEY
            # Twitch
            twitch_client_id: $TWITCH_CLIENT_ID
            twitch_client_secret: $TWITCH_CLIENT_SECRET
            twitch_token: $TWITCH_CLIENT_TOKEN

            # Vultr
            vultr_api_key: $VULTR_API_KEY
            # Sonarr
            sonarr_api_key: $SONARR_API_KEY
            # Unifi
            unifi_host: $UNIFI_IPV4
            unifi_password: $UNIFI_PASSWORD
            # iCloud3
            icloud_username: $ICLOUD_USERNAME
            icloud_password: $ICLOUD_PASSWORD

            # Alpha Vantage Exchange Integration
            alpha_vantage_api_key: $ALPHA_API_KEY
            # PostgreSQL Database
            external_database: $DB_STRING

            ha_latitude:  $HA_LATITUDE
            ha_longitude: $HA_LONGITUDE
            ha_elevation: $HA_ELEVATION

            # Accuweather Integration
            accuweather_api_key: $ACCUWEATHER_API_KEY
            # OpenWeatherMap Integration
            openweathermap_api_key: $OPENWEATHERMAP_API_KEY

            # Apex Charts Integration
            apexcharts_tibber: ""
            apexcharts_influx: ""
            apexcharts_github: ""

            youtube_token: ""

            # SMTP Integration
            smtp_server: $SMTP_HOST
            smtp_sender: $HA_SENDER_EMAIL
            smtp_username: $SMTP_USER
            smtp_password: $SMTP_PASS
            smtp_recipient1: $HA_RECIPIENT_EMAIL_1
            smtp_recipient2: $HA_RECIPIENT_EMAIL_2
        EOF
      - kubectl apply -f test/ha-secret.yaml
      - rm test/ha-secret.yaml
    ignore_error: true

  infra:
    cmds:
      - rm test/infra-secret.yaml
      - |
        cat << EOF > test/infra-secret.yaml
        apiVersion: v1
        kind: Secret
        metadata:
          name: infra-admin-credentials
          namespace: kube-system
        type: Opaque
        stringData:
          INFRA_ADMIN_PASSWORD: "$INFRA_ADMIN_PASSWORD"
          INFRA_CLUSTER_IP: "$INFRA_CLUSTER_IP"
          INFRA_ADMIN_KEY: "$INFRA_ADMIN_KEY"
          INFRA_ADMIN_USERNAME: "$INFRA_ADMIN_USERNAME"
        EOF
      - kubectl apply -f test/infra-secret.yaml
      - rm test/infra-secret.yaml
    ignore_error: true

  wallabag:
    cmds:
      - rm test/wallabag-secret.yaml
      - |
        cat << EOF > test/wallabag-secret.yaml
        apiVersion: v1
        kind: Secret
        metadata:
          name: wallabag-vars
          namespace: services
        type: Opaque
        stringData:
          SYMFONY__ENV__MAILER_HOST: "$SMTP_HOST"
          SYMFONY__ENV__MAILER_USER: "$SMTP_USER"
          SYMFONY__ENV__MAILER_PASSWORD: "$SMTP_PASS"
          SYMFONY__ENV__FROM_EMAIL: "$WALLABAG_SENDER_EMAIL"
          SYMFONY__ENV__DATABASE_PASSWORD: "$WALLABAG_DB_PASSWORD"
          SYMFONY__ENV__DATABASE_HOST: "$WALLABAG_DB_HOST"
          SYMFONY__ENV__DATABASE_PORT: "$WALLABAG_DB_PORT"
          SYMFONY__ENV__DATABASE_NAME: "$WALLABAG_DB_NAME"
          SYMFONY__ENV__DATABASE_USER: "$WALLABAG_DB_USER"
          POSTGRES_USERNAME: "$WALLABAG_DB_USER"
          POSTGRES_PASSWORD: "$WALLABAG_DB_PASSWORD"
        EOF
      - kubectl apply -f test/wallabag-secret.yaml
      - rm test/wallabag-secret.yaml

  aws:
    cmds:
      - rm test/aws-secret.yaml
      - |
        cat << EOF > test/aws-secret.yaml
        apiVersion: v1
        apiVersion: v1
        kind: Secret
        metadata:
          name: aws-secret
          namespace: kube-system
        stringData:
          key_id: "$AWS_KEY_ID"
          access_key: "$AWS_SECRET_KEY"
        EOF
      - kubectl apply -f test/aws-secret.yaml
      - rm test/aws-secret.yaml
    ignore_error: true

  commenter:
    cmds:
      - rm test/argocd-commenter.yaml
      - |
        cat << EOF > test/argocd-commenter.yaml
        apiVersion: v1
        kind: Secret
        metadata:
          name: controller-manager
          namespace: argocd
        stringData:
          GITHUB_TOKEN: "$GH_PASS"
        EOF
      - kubectl apply -f test/argocd-commenter.yaml
      - rm test/argocd-commenter.yaml
    ignore_error: true

  digitalocean:
    cmds:
      - rm test/digitalocean-secret.yaml
      - |
        cat << EOF > test/digitalocean-secret.yaml
        apiVersion: v1
        kind: Secret
        metadata:
          name: digitalocean
          namespace: kube-system
        stringData:
          access-token: "$DIGITALOCEAN_ACCESS_TOKEN"
        EOF
      - kubectl apply -f test/digitalocean-secret.yaml
      - rm test/digitalocean-secret.yaml
    ignore_error: true

  vultr:
    cmds:
      - rm test/vultr-secret.yaml
      - |
        cat << EOF > test/vultr-secret.yaml
        apiVersion: v1
        kind: Secret
        metadata:
          name: vultr-csi
          namespace: kube-system
        stringData:
          api-key: "$VULTR_API_KEY"
        EOF
      - kubectl apply -f test/vultr-secret.yaml
      - rm test/vultr-secret.yaml
    ignore_error: true

  gen:
    cmds:
      - task: n8n
      - task: kuma
      - task: flame
      - task: poller
      - task: botkube
      - task: kubeconfig
      - task: wakapi
      - task: rss:gen
      - task: rss:hub
      - task: wyze
      - task: metabase
      - task: ha
      - task: commenter
      - task: wallabag
