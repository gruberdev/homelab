apiVersion: apps/v1
kind: Deployment
metadata:
  name: drone-server
  labels:
    app: drone
  annotations:
    link.argocd.argoproj.io/external-link: "https://drone.gr.wtf"
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: drone
  template:
    metadata:
      labels:
        app: drone
    spec:
      containers:
        - envFrom:
            - configMapRef:
                name: drone-cm
            - secretRef:
                name: drone-server-vars
          env:
            - name: DB_USERNAME
              valueFrom: { secretKeyRef: { name: ciuser.db-drone.credentials.postgresql.acid.zalan.do, key: username } }
            - name: DB_PASSWORD
              valueFrom: { secretKeyRef: { name: ciuser.db-drone.credentials.postgresql.acid.zalan.do, key: password } }
            - name: DRONE_DATABASE_DATASOURCE
              value: "postgres://$(DB_USERNAME):$(DB_PASSWORD)@db-drone.drone.svc.cluster.local:5432/drone?sslmode=require"
          image: drone/drone:2
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /healthz
              port: http
          name: server
          ports:
            - containerPort: 80
              name: http
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /healthz
              port: http
          resources:
            limits:
              cpu: 300m
              memory: 512Mi
            requests:
              cpu: 100m
              memory: 256Mi
          volumeMounts:
            - mountPath: /data
              name: storage-volume
      volumes:
        - name: storage-volume
          persistentVolumeClaim:
            claimName: drone-storage
