apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: kube-prometheus
spec:
  project: monitoring
  source:
    repoURL: 'https://github.com/prometheus-community/helm-charts.git'
    targetRevision: kube-prometheus-stack-43.2.1
    path: charts/kube-prometheus-stack
    helm:
      skipCrds: true
      releaseName: kube-prometheus
      values: |
        alertmanager:
          alertmanagerSpec:
            clusterAdvertiseAddress: false
            forceEnableClusterMode: false
            image:
              registry: quay.io
              repository: prometheus/alertmanager
              tag: v0.25.0
            listenLocal: false
            logFormat: logfmt
            logLevel: info
            minReadySeconds: 0
            nodeSelector:
              kubernetes.io/arch: amd64
            paused: false
            podAntiAffinityTopologyKey: kubernetes.io/hostname
            portName: http-web
            replicas: 1
            resources:
              limits:
                cpu: 250m
                memory: 512Mi
              requests:
                cpu: 80m
                memory: 256Mi
            retention: 120h
            routePrefix: /
            securityContext:
              fsGroup: 2000
              runAsGroup: 2000
              runAsNonRoot: true
              runAsUser: 1000
            useExistingSecret: false
          apiVersion: v2
          config:
            global:
              resolve_timeout: 5m
            inhibit_rules:
            - equal:
              - namespace
              - alertname
              source_matchers:
              - severity = critical
              target_matchers:
              - severity =~ warning|info
            - equal:
              - namespace
              - alertname
              source_matchers:
              - severity = warning
              target_matchers:
              - severity = info
            - equal:
              - namespace
              source_matchers:
              - alertname = InfoInhibitor
              target_matchers:
              - severity = info
            receivers:
            - name: "null"
            route:
              group_by:
              - namespace
              group_interval: 5m
              group_wait: 30s
              receiver: "null"
              repeat_interval: 12h
              routes:
              - matchers:
                - alertname =~ "InfoInhibitor|Watchdog"
                receiver: "null"
            templates:
            - /etc/alertmanager/config/*.tmpl
          enabled: true
          ingress:
            enabled: false
          ingressPerReplica:
            enabled: false
            tlsSecretPerReplica:
              enabled: false
              prefix: alertmanager
          podDisruptionBudget:
            enabled: false
            minAvailable: 1
          service:
            externalTrafficPolicy: Cluster
            nodePort: 30903
            port: 9093
            targetPort: 9093
            type: ClusterIP
          serviceAccount:
            create: true
          serviceMonitor:
            enableHttp2: true
            labelLimit: 0
            labelNameLengthLimit: 0
            labelValueLengthLimit: 0
            sampleLimit: 0
            selfMonitor: true
            targetLimit: 0
          servicePerReplica:
            enabled: false
            externalTrafficPolicy: Cluster
            nodePort: 30904
            port: 9093
            targetPort: 9093
            type: ClusterIP
          tplConfig: false
        cleanPrometheusOperatorObjectNames: false
        coreDns:
          enabled: true
          service:
            port: 9153
            targetPort: 9153
          serviceMonitor:
            labelLimit: 0
            labelNameLengthLimit: 0
            labelValueLengthLimit: 0
            sampleLimit: 0
            targetLimit: 0
        defaultRules:
          appNamespacesTarget: .*
          create: true
          rules:
            alertmanager: true
            configReloaders: true
            etcd: true
            general: true
            k8s: true
            kubeApiserverAvailability: true
            kubeApiserverBurnrate: true
            kubeApiserverHistogram: true
            kubeApiserverSlos: true
            kubeControllerManager: true
            kubePrometheusGeneral: true
            kubePrometheusNodeRecording: true
            kubeProxy: true
            kubeSchedulerAlerting: true
            kubeSchedulerRecording: true
            kubeStateMetrics: true
            kubelet: true
            kubernetesApps: true
            kubernetesResources: true
            kubernetesStorage: true
            kubernetesSystem: true
            network: true
            node: true
            nodeExporterAlerting: true
            nodeExporterRecording: true
            prometheus: true
            prometheusOperator: true
          runbookUrl: https://runbooks.prometheus-operator.dev/runbooks
        global:
          rbac:
            create: true
            createAggregateClusterRoles: false
            pspEnabled: false
        grafana:
          adminPassword: <path:kv/data/kube-prometheus#grafana-admin-password>
          dashboardProviders:
            dashboardproviders.yaml:
              apiVersion: 1
              providers:
              - disableDeletion: true
                editable: true
                folder: unifi
                name: unifi
                options:
                  path: /var/lib/grafana/dashboards/unifi
                orgId: 1
                type: file
              - disableDeletion: true
                editable: true
                folder: services
                name: services
                options:
                  path: /var/lib/grafana/dashboards/services
                orgId: 1
                type: file
              - disableDeletion: true
                editable: true
                folder: kubernetes
                name: kubernetes
                options:
                  path: /var/lib/grafana/dashboards/kubernetes
                orgId: 1
                type: file
          dashboards:
            kubernetes:
              apiServer:
                datasource: Prometheus
                gnetId: 15761
                revision: 11
              coreDns:
                datasource: Prometheus
                gnetId: 15762
                revision: 10
              globalView:
                datasource: Prometheus
                gnetId: 15757
                revision: 22
              namespaces:
                datasource: Prometheus
                gnetId: 15758
                revision: 15
              nodes:
                datasource: Prometheus
                gnetId: 15759
                revision: 14
              pods:
                datasource: Prometheus
                gnetId: 15760
                revision: 15
            services:
              adguardMonitoring:
                datasource: Prometheus
                gnetId: 13330
                revision: 3
              argocdMonitoring:
                datasource: Prometheus
                gnetId: 14584
                revision: 1
              calicoMonitoring:
                datasource: Prometheus
                gnetId: 12175
                revision: 5
              grafanaImageRenderer:
                datasource: Prometheus
                gnetId: 12203
                revision: 2
              longhornMonitoring:
                datasource: Prometheus
                gnetId: 16888
                revision: 5
              nvidiaMonitoring:
                datasource: Prometheus
                gnetId: 14574
                revision: 8
              postgresMonitoring:
                datasource: Prometheus
                gnetId: 12485
                revision: 1
              vaultMonitoring:
                datasource: Prometheus
                gnetId: 15124
                revision: 2
            unifi:
              unifiPollerClientDPI:
                datasource: Prometheus
                gnetId: 11310
                revision: 5
              unifiPollerClientInsights:
                datasource: Prometheus
                gnetId: 11315
                revision: 9
              unifiPollerNetworkSites:
                datasource: Prometheus
                gnetId: 11311
                revision: 5
              unifiPollerUAPInsights:
                datasource: Prometheus
                gnetId: 11314
                revision: 10
              unifiPollerUSGInsights:
                datasource: Prometheus
                gnetId: 11313
                revision: 9
              unifiPollerUSWInsights:
                datasource: Prometheus
                gnetId: 11312
                revision: 9
          defaultDashboardsEnabled: true
          defaultDashboardsTimezone: America/Sao_Paulo
          enabled: true
          env:
            GF_RENDERING_CALLBACK_URL: http://kube-prometheus-grafana.monitoring.svc.cluster.local
            GF_RENDERING_SERVER_URL: http://grafana-image-renderer.monitoring.svc.cluster.local/render
          forceDeployDashboards: false
          forceDeployDatasources: false
          ingress:
            enabled: false
          namespaceOverride: monitoring
          plugins:
          - grafana-image-renderer
          - grafana-piechart-panel
          - grafana-clock-panel
          rbac:
            pspEnabled: false
          service:
            enabled: true
            portName: service
            type: ClusterIP
          serviceMonitor:
            enabled: true
            path: /metrics
            scheme: http
            scrapeTimeout: 30s
          sidecar:
            dashboards:
              enabled: true
              label: grafana_dashboard
              labelValue: "1"
              multicluster:
                etcd:
                  enabled: false
                global:
                  enabled: false
              provider:
                allowUiUpdates: false
            datasources:
              createPrometheusReplicasDatasources: false
              defaultDatasourceEnabled: true
              enabled: true
              isDefaultDatasource: true
              label: grafana_datasource
              labelValue: "1"
              uid: prometheus
        kube-state-metrics:
          prometheus:
            monitor:
              enabled: true
              honorLabels: true
              labelLimit: 0
              labelNameLengthLimit: 0
              labelValueLengthLimit: 0
              sampleLimit: 0
              targetLimit: 0
          rbac:
            create: true
          releaseLabel: true
          selfMonitor:
            enabled: false
        kubeApiServer:
          enabled: true
          serviceMonitor:
            jobLabel: component
            labelLimit: 0
            labelNameLengthLimit: 0
            labelValueLengthLimit: 0
            metricRelabelings:
            - action: drop
              regex: apiserver_request_duration_seconds_bucket;(0.15|0.2|0.3|0.35|0.4|0.45|0.6|0.7|0.8|0.9|1.25|1.5|1.75|2|3|3.5|4|4.5|6|7|8|9|15|25|40|50)
              sourceLabels:
              - __name__
              - le
            sampleLimit: 0
            selector:
              matchLabels:
                component: apiserver
                provider: kubernetes
            targetLimit: 0
          tlsConfig:
            insecureSkipVerify: true
            serverName: kubernetes
        kubeControllerManager:
          enabled: true
          service:
            enabled: true
          serviceMonitor:
            enabled: true
            labelLimit: 0
            labelNameLengthLimit: 0
            labelValueLengthLimit: 0
            sampleLimit: 0
            targetLimit: 0
        kubeDns:
          enabled: false
          service:
            dnsmasq:
              port: 10054
              targetPort: 10054
            skydns:
              port: 10055
              targetPort: 10055
          serviceMonitor:
            labelLimit: 0
            labelNameLengthLimit: 0
            labelValueLengthLimit: 0
            sampleLimit: 0
            targetLimit: 0
        kubeEtcd:
          enabled: true
          service:
            enabled: true
            port: 2381
            targetPort: 2381
          serviceMonitor:
            enabled: true
            insecureSkipVerify: false
            labelLimit: 0
            labelNameLengthLimit: 0
            labelValueLengthLimit: 0
            sampleLimit: 0
            scheme: http
            targetLimit: 0
        kubeProxy:
          enabled: true
          service:
            enabled: true
            port: 10249
            targetPort: 10249
          serviceMonitor:
            enabled: true
            https: false
            labelLimit: 0
            labelNameLengthLimit: 0
            labelValueLengthLimit: 0
            sampleLimit: 0
            targetLimit: 0
        kubeScheduler:
          enabled: true
          service:
            enabled: true
          serviceMonitor:
            enabled: true
            labelLimit: 0
            labelNameLengthLimit: 0
            labelValueLengthLimit: 0
            sampleLimit: 0
            targetLimit: 0
        kubeStateMetrics:
          enabled: true
        kubelet:
          enabled: true
          namespace: kube-system
          serviceMonitor:
            cAdvisor: true
            cAdvisorMetricRelabelings:
            - action: drop
              regex: container_cpu_(cfs_throttled_seconds_total|load_average_10s|system_seconds_total|user_seconds_total)
              sourceLabels:
              - __name__
            - action: drop
              regex: container_fs_(io_current|io_time_seconds_total|io_time_weighted_seconds_total|reads_merged_total|sector_reads_total|sector_writes_total|writes_merged_total)
              sourceLabels:
              - __name__
            - action: drop
              regex: container_memory_(mapped_file|swap)
              sourceLabels:
              - __name__
            - action: drop
              regex: container_(file_descriptors|tasks_state|threads_max)
              sourceLabels:
              - __name__
            - action: drop
              regex: container_spec.*
              sourceLabels:
              - __name__
            - action: drop
              regex: .+;
              sourceLabels:
              - id
              - pod
            cAdvisorRelabelings:
            - action: replace
              sourceLabels:
              - __metrics_path__
              targetLabel: metrics_path
            https: true
            labelLimit: 0
            labelNameLengthLimit: 0
            labelValueLengthLimit: 0
            probes: true
            probesRelabelings:
            - action: replace
              sourceLabels:
              - __metrics_path__
              targetLabel: metrics_path
            relabelings:
            - action: replace
              sourceLabels:
              - __metrics_path__
              targetLabel: metrics_path
            resource: false
            resourcePath: /metrics/resource/v1alpha1
            resourceRelabelings:
            - action: replace
              sourceLabels:
              - __metrics_path__
              targetLabel: metrics_path
            sampleLimit: 0
            targetLimit: 0
        namespaceOverride: monitoring
        nodeExporter:
          enabled: true
        prometheus:
          enabled: true
          ingress:
            enabled: false
          ingressPerReplica:
            enabled: false
            tlsSecretPerReplica:
              enabled: false
              prefix: prometheus
          podDisruptionBudget:
            enabled: false
            minAvailable: 1
          prometheusSpec:
            additionalScrapeConfigs:
            - job_name: unifipoller
              scrape_interval: 30s
              static_configs:
              - targets:
                - 192.168.1.10:32767
            - authorization:
                credentials: <path:kv/data/ha#auth-token>
              job_name: hass
              metrics_path: /api/prometheus
              scheme: http
              scrape_interval: 60s
              static_configs:
              - targets:
                - 192.168.1.10:8123
            - job_name: grafana-image-rendering-service
              static_configs:
              - targets:
                - grafana-image-renderer.monitoring.svc.cluster.local:80
            - job_name: argocd
              metrics_path: /metrics
              static_configs:
              - targets:
                - argocd-metrics.argocd.svc.cluster.local:8082
                - argocd-server-metrics.argocd.svc.cluster.local:8083
                - argocd-repo-server.argocd.svc.cluster.local:8084
            - job_name: 'uptime'
              scrape_interval: 30s
              scheme: http
              static_configs:
                - targets: ['kuma-svc.monitoring.svc.cluster.local:8080']
              basic_auth:
                username: <path:kv/data/kuma#username>
                password: <path:kv/data/kuma#password
            allowOverlappingBlocks: false
            arbitraryFSAccessThroughSMs: false
            disableCompaction: false
            enableAdminAPI: false
            enableRemoteWriteReceiver: false
            enforcedLabelLimit: false
            enforcedLabelNameLengthLimit: false
            enforcedLabelValueLengthLimit: false
            enforcedSampleLimit: false
            enforcedTargetLimit: false
            hostNetwork: false
            ignoreNamespaceSelectors: false
            image:
              registry: quay.io
              repository: prometheus/prometheus
              tag: v2.41.0
            listenLocal: false
            logFormat: logfmt
            logLevel: info
            minReadySeconds: 0
            nodeSelector:
              kubernetes.io/arch: amd64
            overrideHonorLabels: false
            overrideHonorTimestamps: false
            paused: false
            podAntiAffinityTopologyKey: kubernetes.io/hostname
            podMonitorSelectorNilUsesHelmValues: true
            portName: http-web
            probeSelectorNilUsesHelmValues: true
            prometheusExternalLabelNameClear: false
            queryLogFile: false
            remoteWriteDashboards: false
            replicaExternalLabelNameClear: false
            replicas: 1
            resources:
              limits:
                cpu: 600m
                memory: 2Gi
              requests:
                cpu: 130m
                memory: 512Mi
            retention: 10d
            routePrefix: /
            ruleSelector:
              matchExpressions:
              - key: prometheus
                operator: In
                values:
                - longhorn
            ruleSelectorNilUsesHelmValues: true
            securityContext:
              fsGroup: 2000
              runAsGroup: 2000
              runAsNonRoot: true
              runAsUser: 1000
            serviceMonitorNamespaceSelector:
              matchLabels:
                prometheus: enabled
            serviceMonitorSelectorNilUsesHelmValues: false
            shards: 1
            storageSpec:
              volumeClaimTemplate:
                spec:
                  accessModes:
                  - ReadWriteOnce
                  resources:
                    requests:
                      storage: 30Gi
                  storageClassName: iscsi
            walCompression: true
          service:
            externalTrafficPolicy: Cluster
            nodePort: 30090
            port: 9090
            publishNotReadyAddresses: false
            targetPort: 9090
            type: ClusterIP
          serviceAccount:
            create: true
          serviceMonitor:
            labelLimit: 0
            labelNameLengthLimit: 0
            labelValueLengthLimit: 0
            sampleLimit: 0
            selfMonitor: true
            targetLimit: 0
          servicePerReplica:
            enabled: false
            externalTrafficPolicy: Cluster
            nodePort: 30091
            port: 9090
            targetPort: 9090
            type: ClusterIP
          thanosIngress:
            enabled: false
            nodePort: 30901
            servicePort: 10901
          thanosService:
            clusterIP: None
            enabled: false
            externalTrafficPolicy: Cluster
            httpNodePort: 30902
            httpPort: 10902
            httpPortName: http
            nodePort: 30901
            port: 10901
            portName: grpc
            targetHttpPort: http
            targetPort: grpc
            type: ClusterIP
          thanosServiceExternal:
            enabled: false
            externalTrafficPolicy: Cluster
            httpNodePort: 30902
            httpPort: 10902
            httpPortName: http
            nodePort: 30901
            port: 10901
            portName: grpc
            targetHttpPort: http
            targetPort: grpc
            type: LoadBalancer
          thanosServiceMonitor:
            enabled: false
        prometheus-node-exporter:
          extraArgs:
          - --collector.filesystem.mount-points-exclude=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/.+)($|/)
          - --collector.filesystem.fs-types-exclude=^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$
          podLabels:
            jobLabel: node-exporter
          prometheus:
            monitor:
              enabled: true
              jobLabel: jobLabel
              labelLimit: 0
              labelNameLengthLimit: 0
              labelValueLengthLimit: 0
              sampleLimit: 0
              targetLimit: 0
          rbac:
            pspEnabled: false
          releaseLabel: true
          service:
            portName: http-metrics
        prometheusOperator:
          admissionWebhooks:
            certManager:
              enabled: false
            enabled: true
            patch:
              enabled: true
              image:
                pullPolicy: IfNotPresent
                registry: registry.k8s.io
                repository: ingress-nginx/kube-webhook-certgen
                tag: v1.3.0
              nodeSelector:
                kubernetes.io/arch: amd64
              resources:
                limits:
                  cpu: 350m
                  memory: 512Mi
                requests:
                  cpu: 150m
                  memory: 256Mi
              securityContext:
                runAsGroup: 2000
                runAsNonRoot: true
                runAsUser: 2000
            timeoutSeconds: 10
          containerSecurityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          enabled: true
          hostNetwork: false
          image:
            pullPolicy: IfNotPresent
            registry: quay.io
            repository: prometheus-operator/prometheus-operator
            tag: v0.62.0
          kubeletService:
            enabled: true
            namespace: kube-system
          namespaces:
            additional:
            - kube-system
            - vault
            - agones-system
            releaseNamespace: true
          networkPolicy:
            enabled: false
          nodeSelector:
            kubernetes.io/arch: amd64
          prometheusConfigReloader:
            image:
              registry: quay.io
              repository: prometheus-operator/prometheus-config-reloader
              tag: v0.62.0
            resources:
              limits:
                cpu: 80m
                memory: 160Mi
              requests:
                cpu: 40m
                memory: 80Mi
          resources:
            limits:
              cpu: 400m
              memory: 1Gi
            requests:
              cpu: 200m
              memory: 512Mi
          securityContext:
            fsGroup: 65534
            runAsGroup: 65534
            runAsNonRoot: true
            runAsUser: 65534
          service:
            externalTrafficPolicy: Cluster
            nodePort: 30080
            nodePortTls: 30443
            type: ClusterIP
          serviceAccount:
            create: true
          serviceMonitor:
            labelLimit: 0
            labelNameLengthLimit: 0
            labelValueLengthLimit: 0
            sampleLimit: 0
            selfMonitor: true
            targetLimit: 0
          thanosImage:
            registry: quay.io
            repository: thanos/thanos
            tag: v0.30.1
          tls:
            enabled: false
            internalPort: 10250
            tlsMinVersion: VersionTLS13
          verticalPodAutoscaler:
            enabled: false
            updatePolicy:
              updateMode: Auto
        thanosRuler:
          enabled: false
          ingress:
            enabled: false
          podDisruptionBudget:
            enabled: false
            minAvailable: 1
          service:
            externalTrafficPolicy: Cluster
            nodePort: 30905
            port: 10902
            targetPort: 10902
            type: ClusterIP
          serviceAccount:
            create: true
          serviceMonitor:
            labelLimit: 0
            labelNameLengthLimit: 0
            labelValueLengthLimit: 0
            sampleLimit: 0
            selfMonitor: true
            targetLimit: 0
          thanosRulerSpec:
            image:
              registry: quay.io
              repository: thanos/thanos
              tag: v0.30.1
            listenLocal: false
            logFormat: logfmt
            logLevel: info
            nodeSelector:
              kubernetes.io/arch: amd64
            paused: false
            podAntiAffinityTopologyKey: kubernetes.io/hostname
            portName: web
            replicas: 1
            resources:
              limits:
                cpu: 220m
                memory: 512Mi
              requests:
                cpu: 140m
                memory: 128Mi
            retention: 24h
            routePrefix: /
            ruleSelectorNilUsesHelmValues: true
            securityContext:
              fsGroup: 2000
              runAsGroup: 2000
              runAsNonRoot: true
              runAsUser: 1000
  destination:
    namespace: monitoring
    name: in-cluster
  syncPolicy:
    automated:
      prune: true
      selfHeal: false
      allowEmpty: true
    syncOptions:
    - Validate=false
    - CreateNamespace=false
    - PrunePropagationPolicy=foreground
    - PruneLast=true
    - ApplyOutOfSyncOnly=false
    - Prune=true
    retry:
      limit: 15
      backoff:
        duration: 15s
        factor: 2
        maxDuration: 20m
  # See: https://github.com/prometheus-community/helm-charts/issues/1041
  ignoreDifferences:
  - group: admissionregistration.k8s.io
    kind: MutatingWebhookConfiguration
    name: kube-prometheus-kube-prome-admission
    jsonPointers:
    - /webhooks/0/failurePolicy
  - group: admissionregistration.k8s.io
    kind: ValidatingWebhookConfiguration
    name: kube-prometheus-kube-prome-admission
    jsonPointers:
    - /webhooks/0/failurePolicy
