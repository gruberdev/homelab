apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: velero
spec:
  project: cluster
  source:
    repoURL: https://github.com/vmware-tanzu/helm-charts.git
    targetRevision: velero-3.1.4
    path: charts/velero
    helm:
      releaseName: velero
      values: |
        image:
          repository: velero/velero
          tag: v1.10.2
          pullPolicy: IfNotPresent
        annotations:
          secret.reloader.stakater.com/reload: "velero-creds"
        resources:
          requests:
            cpu: 200m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 512Mi
        dnsPolicy: ClusterFirst
        initContainers:
          - name: velero-plugin-for-csi
            image: velero/velero-plugin-for-csi:v0.4.2
            imagePullPolicy: IfNotPresent
            volumeMounts:
              - mountPath: /target
                name: plugins
          - name: velero-plugin-for-aws
            image: velero/velero-plugin-for-aws:v1.6.1
            imagePullPolicy: IfNotPresent
            volumeMounts:
              - mountPath: /target
                name: plugins
        priorityClassName: ""
        terminationGracePeriodSeconds: 3600
        tolerations: []
        affinity: {}
        nodeSelector:
          kubernetes.io/arch: amd64
        dnsConfig: {}
        extraVolumes: []
        extraVolumeMounts: []
        extraObjects: []
          # - apiVersion: secrets-store.csi.x-k8s.io/v1
          #   kind: SecretProviderClass
          #   metadata:
          #     name: velero-secrets-store
          #   spec:
          #     provider: aws
          #     parameters:
          #       objects: |
          #         - objectName: "velero"
          #           objectType: "secretsmanager"
          #           jmesPath:
          #               - path: "access_key"
          #                 objectAlias: "access_key"
          #               - path: "secret_key"
          #                 objectAlias: "secret_key"
          #     secretObjects:
          #       - data:
          #         - key: access_key
          #           objectName: client-id
          #         - key: client-secret
          #           objectName: client-secret
          #         secretName: velero-secrets-store
          #         type: Opaque
        metrics:
          enabled: true
          scrapeInterval: 30s
          scrapeTimeout: 10s
          service:
            annotations: {}
            labels: {}
          podAnnotations:
            prometheus.io/scrape: "true"
            prometheus.io/port: "8085"
            prometheus.io/path: "/metrics"
          serviceMonitor:
            autodetect: true
            enabled: true
            namespace: monitoring

          prometheusRule:
            enabled: false
            # Additional labels to add to deployed PrometheusRule
            additionalLabels: {}
            # PrometheusRule namespace. Defaults to Velero namespace.
            # namespace: ""
            # Rules to be deployed
            spec: []
            # - alert: VeleroBackupPartialFailures
            #   annotations:
            #     message: Velero backup {{ $labels.schedule }} has {{ $value | humanizePercentage }} partialy failed backups.
            #   expr: |-
            #     velero_backup_partial_failure_total{schedule!=""} / velero_backup_attempt_total{schedule!=""} > 0.25
            #   for: 15m
            #   labels:
            #     severity: warning
            # - alert: VeleroBackupFailures
            #   annotations:
            #     message: Velero backup {{ $labels.schedule }} has {{ $value | humanizePercentage }} failed backups.
            #   expr: |-
            #     velero_backup_failure_total{schedule!=""} / velero_backup_attempt_total{schedule!=""} > 0.25
            #   for: 15m
            #   labels:
            #     severity: warning
        kubectl:
          image:
            repository: docker.io/bitnami/kubectl
        upgradeCRDs: true
        cleanUpCRDs: true
        configuration:
          # Cloud provider being used (e.g. aws, azure, gcp).
          provider: aws
          # Parameters for the `default` BackupStorageLocation. See
          # https://velero.io/docs/v1.6/api-types/backupstoragelocation/
          backupStorageLocation:
            # name is the name of the backup storage location where backups should be stored. If a name is not provided,
            # a backup storage location will be created with the name "default". Optional.
            name: vultr
            prefix: backups
            provider: aws
            bucket: k8s-backups
            accessMode: ReadWrite
            # Additional provider-specific configuration. See link above
            # for details of required/optional fields for your provider.
            config:
              region: main
              s3ForcePathStyle: true
              s3Url: https://ewr1.vultrobjects.com
              publicUrl: https://ewr1.vultrobjects.com
              insecureSkipTLSVerify: true

          # Parameters for the `default` VolumeSnapshotLocation. See
          # https://velero.io/docs/v1.6/api-types/volumesnapshotlocation/
          volumeSnapshotLocation:
            # name is the name of the volume snapshot location where snapshots are being taken. Required.
            name: vultr
            # provider is the name for the volume snapshot provider. If omitted
            # `configuration.provider` will be used instead.
            provider: aws
            # Additional provider-specific configuration. See link above
            # for details of required/optional fields for your provider.
            config: {}
          #    region:
          #    apiTimeout:
          #    resourceGroup:
          #    The ID of the subscription where volume snapshots should be stored, if different from the clusterâ€™s subscription. If specified, also requires `configuration.volumeSnapshotLocation.config.resourceGroup`to be set. (Azure only)
          #    subscriptionId:
          #    incremental:
          #    snapshotLocation:
          #    project:

          # These are server-level settings passed as CLI flags to the `velero server` command. Velero
          # uses default values if they're not passed in, so they only need to be explicitly specified
          # here if using a non-default value. The `velero server` default values are shown in the
          # comments below.
          # --------------------
          # `velero server` default: restic
          uploaderType: restic
          # `velero server` default: 1m
          backupSyncPeriod:
          # `velero server` default: 4h
          fsBackupTimeout:
          # `velero server` default: 30
          clientBurst:
          # `velero server` default: 500
          clientPageSize:
          # `velero server` default: 20.0
          clientQPS:
          # Name of the default backup storage location. Default: default
          defaultBackupStorageLocation: vultr
          # How long to wait by default before backups can be garbage collected. Default: 72h
          defaultBackupTTL:
          # Name of the default volume snapshot location.
          defaultVolumeSnapshotLocations:
          # `velero server` default: empty
          disableControllers:
          # `velero server` default: 1h
          garbageCollectionFrequency:
          # Set log-format for Velero pod. Default: text. Other option: json.
          logFormat: text
          # Set log-level for Velero pod. Default: info. Other options: debug, warning, error, fatal, panic.
          logLevel: debug
          # The address to expose prometheus metrics. Default: :8085
          metricsAddress:
          # Directory containing Velero plugins. Default: /plugins
          pluginDir: /plugins
          # The address to expose the pprof profiler. Default: localhost:6060
          profilerAddress:
          # `velero server` default: false
          restoreOnlyMode: false
          # `velero server` default: customresourcedefinitions,namespaces,storageclasses,volumesnapshotclass.snapshot.storage.k8s.io,volumesnapshotcontents.snapshot.storage.k8s.io,volumesnapshots.snapshot.storage.k8s.io,persistentvolumes,persistentvolumeclaims,secrets,configmaps,serviceaccounts,limitranges,pods,replicasets.apps,clusterclasses.cluster.x-k8s.io,clusters.cluster.x-k8s.io,clusterresourcesets.addons.cluster.x-k8s.io
          restoreResourcePriorities:
          # `velero server` default: 1m
          storeValidationFrequency:
          # How long to wait on persistent volumes and namespaces to terminate during a restore before timing out. Default: 10m
          terminatingResourceTimeout:
          # Comma separated list of velero feature flags. default: empty
          # features: EnableCSI
          features:
          # `velero server` default: velero
          namespace: velero
          # additional key/value pairs to be used as environment variables such as "AWS_CLUSTER_NAME: 'yourcluster.domain.tld'"
          extraEnvVars:
            TZ: "America/Sao_Paulo"
          # Set true for backup all pod volumes without having to apply annotation on the pod when used file system backup Default: false.
          defaultVolumesToFsBackup: true
          # How often repository maintain is run for repositories by default.
          defaultRepoMaintainFrequency:
        rbac:
          # Whether to create the Velero role and role binding to give all permissions to the namespace to Velero.
          create: true
          # Whether to create the cluster role binding to give administrator permissions to Velero
          clusterAdministrator: true
          # Name of the ClusterRole.
          clusterAdministratorName: cluster-admin
        # Information about the Kubernetes service account Velero uses.
        serviceAccount:
          server:
            create: true
            name:
            annotations:
            labels:
        # Info about the secret to be used by the Velero deployment, which
        # should contain credentials for the cloud provider IAM account you've
        # set up for Velero.
        credentials:
          useSecret: true
          # Name of the secret to create if `useSecret` is true and `existingSecret` is empty
          name: velero-creds
          secretContents:
           cloud: |
             [default]
             aws_access_key_id = <path:kv/data/velero#id>
             aws_secret_access_key = <path:kv/data/velero#key>
          extraEnvVars: {}
          # Name of a pre-existing secret (if any) in the Velero namespace
          # that will be used to load environment variables into velero and node-agent.
          # Secret should be in format - https://kubernetes.io/docs/concepts/configuration/secret/#use-case-as-container-environment-variables
          extraSecretRef: ""

        # Whether to create backupstoragelocation crd, if false => do not create a default backup location
        backupsEnabled: true
        # Whether to create volumesnapshotlocation crd, if false => disable snapshot feature
        snapshotsEnabled: false

        # Whether to deploy the node-agent daemonset.
        deployNodeAgent: true

        nodeAgent:
          podVolumePath: /var/lib/kubelet/pods
          privileged: true
          # Pod priority class name to use for the node-agent daemonset. Optional.
          priorityClassName: ""
          # Resource requests/limits to specify for the node-agent daemonset deployment. Optional.
          # https://velero.io/docs/v1.6/customize-installation/#customize-resource-requests-and-limits
          resources:
            requests:
              cpu: 150m
              memory: 256Mi
            limits:
              cpu: 350m
              memory: 728Mi

          # will map /scratch to emptyDir. Set to false and specify your own volume
          # via extraVolumes and extraVolumeMounts that maps to /scratch
          # if you don't want to use emptyDir.
          useScratchEmptyDir: true

          # Extra volumes for the node-agent daemonset. Optional.
          extraVolumes: []

          # Extra volumeMounts for the node-agent daemonset. Optional.
          extraVolumeMounts: []

          # Key/value pairs to be used as environment variables for the node-agent daemonset. Optional.
          extraEnvVars: {}

          # Configure the dnsPolicy of the node-agent daemonset
          # See: https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-dns-policy
          dnsPolicy: ClusterFirst

          # SecurityContext to use for the Velero deployment. Optional.
          # Set fsGroup for `AWS IAM Roles for Service Accounts`
          # see more informations at: https://docs.aws.amazon.com/eks/latest/userguide/iam-roles-for-service-accounts.html
          podSecurityContext:
            runAsUser: 0
            # fsGroup: 1337

          # Container Level Security Context for the 'node-agent' container of the node-agent daemonset. Optional.
          # See: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
          containerSecurityContext: {}

          # Container Lifecycle Hooks to use for the node-agent daemonset. Optional.
          lifecycle: {}

          # Node selector to use for the node-agent daemonset. Optional.
          nodeSelector:
            kubernetes.io/arch: amd64

          # Affinity to use with node-agent daemonset. Optional.
          affinity: {}

          # DNS configuration to use for the node-agent daemonset. Optional.
          dnsConfig: {}

        # Backup schedules to create.
        # Eg:
        # schedules:
        #   mybackup:
        #     disabled: false
        #     labels:
        #       myenv: foo
        #     annotations:
        #       myenv: foo
        #     schedule: "0 0 * * *"
        #     useOwnerReferencesInBackup: false
        #     template:
        #       ttl: "240h"
        #       includedNamespaces:
        #       - foo
        schedules: {}

        # Velero ConfigMaps.
        # Eg:
        # configMaps:
        #   fs-restore-action-config:
        #     labels:
        #       velero.io/plugin-config: ""
        #       velero.io/pod-volume-restore: RestoreItemAction
        #     data:
        #       image: velero/velero-restore-helper:v1.10.2
        configMaps: {}
  destination:
    namespace: velero
    name: in-cluster
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
      allowEmpty: true
    syncOptions:
    - Validate=false
    - CreateNamespace=true
    - PrunePropagationPolicy=foreground
    - PruneLast=false
    - ApplyOutOfSyncOnly=false
    - Prune=true
    retry:
      limit: 5
      backoff:
        duration: 60s
        factor: 2
        maxDuration: 15m
