apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: longhorn
spec:
  project: cluster
  source:
    repoURL: 'https://github.com/longhorn/longhorn.git'
    targetRevision: v1.4.0-rc2
    path: chart
    helm:
      releaseName: longhorn
      values: |
          global:
            cattle:
              systemDefaultRegistry: ""
              windowsCluster:
                # Enable this to allow Longhorn to run on the Rancher deployed Windows cluster
                enabled: false
          image:
            longhorn:
              engine:
                repository: longhornio/longhorn-engine
                tag: v1.4.0-rc2
              manager:
                repository: longhornio/longhorn-manager
                tag: v1.4.0-rc2
              ui:
                repository: longhornio/longhorn-ui
                tag: v1.4.0-rc2
              instanceManager:
                repository: longhornio/longhorn-instance-manager
                tag: v1.4.0-rc2
              shareManager:
                repository: longhornio/longhorn-share-manager
                tag: v1.4.0-rc2
              backingImageManager:
                repository: longhornio/backing-image-manager
                tag: v1.4.0-rc2
              supportBundleKit:
                repository: longhornio/support-bundle-kit
                tag: v0.0.17
            csi:
              attacher:
                repository: longhornio/csi-attacher
                tag: v3.4.0
              provisioner:
                repository: longhornio/csi-provisioner
                tag: v2.1.2
              nodeDriverRegistrar:
                repository: longhornio/csi-node-driver-registrar
                tag: v2.5.0
              resizer:
                repository: longhornio/csi-resizer
                tag: v1.3.0
              snapshotter:
                repository: longhornio/csi-snapshotter
                tag: v5.0.1
              livenessProbe:
                repository: longhornio/livenessprobe
                tag: v2.8.0
            pullPolicy: IfNotPresent

          service:
            ui:
              type: ClusterIP
              nodePort: null
            manager:
              type: ClusterIP
              nodePort: ""
              loadBalancerIP: ""
              loadBalancerSourceRanges: ""

          persistence:
            defaultClass: true
            defaultFsType: ext4
            defaultMkfsParams: ""
            defaultClassReplicaCount: 1
            defaultDataLocality: disabled # best-effort otherwise
            reclaimPolicy: Delete
            migratable: false
            recurringJobSelector:
              enable: false
              jobList: []
            backingImage:
              enable: false
              name: ~
              dataSourceType: ~
              dataSourceParameters: ~
              expectedChecksum: ~
            defaultNodeSelector:
              enable: false # disable by default
              selector: []
            removeSnapshotsDuringFilesystemTrim: ignored # "enabled" or "disabled" otherwise
          csi:
            kubeletRootDir: ~
            attacherReplicaCount: ~
            provisionerReplicaCount: ~
            resizerReplicaCount: ~
            snapshotterReplicaCount: ~
          defaultSettings:
            backupTarget: ~
            backupTargetCredentialSecret: ~
            allowRecurringJobWhileVolumeDetached: ~
            createDefaultDiskLabeledNodes: true
            defaultDataPath: ~
            defaultDataLocality: ~
            replicaSoftAntiAffinity: ~
            replicaAutoBalance: ~
            storageOverProvisioningPercentage: ~
            storageMinimalAvailablePercentage: ~
            upgradeChecker: ~
            defaultReplicaCount: 1
            defaultLonghornStaticStorageClass: ~
            backupstorePollInterval: ~
            failedBackupTTL: ~
            restoreVolumeRecurringJobs: ~
            recurringSuccessfulJobsHistoryLimit: ~
            recurringFailedJobsHistoryLimit: ~
            supportBundleFailedHistoryLimit: ~
            taintToleration: ~
            systemManagedComponentsNodeSelector: ~
            priorityClass: ~
            autoSalvage: ~
            autoDeletePodWhenVolumeDetachedUnexpectedly: true
            disableSchedulingOnCordonedNode: ~
            replicaZoneSoftAntiAffinity: ~
            nodeDownPodDeletionPolicy: ~
            allowNodeDrainWithLastHealthyReplica: ~
            mkfsExt4Parameters: ~
            disableReplicaRebuild: ~
            replicaReplenishmentWaitInterval: ~
            concurrentReplicaRebuildPerNodeLimit: ~
            concurrentVolumeBackupRestorePerNodeLimit: ~
            disableRevisionCounter: ~
            systemManagedPodsImagePullPolicy: ~
            allowVolumeCreationWithDegradedAvailability: ~
            autoCleanupSystemGeneratedSnapshot: ~
            concurrentAutomaticEngineUpgradePerNodeLimit: ~
            backingImageCleanupWaitInterval: ~
            backingImageRecoveryWaitInterval: ~
            guaranteedEngineManagerCPU: ~
            guaranteedReplicaManagerCPU: ~
            kubernetesClusterAutoscalerEnabled: ~
            orphanAutoDeletion: ~
            storageNetwork: ~
            deletingConfirmationFlag: ~
            engineReplicaTimeout: ~
            snapshotDataIntegrity: ~
            snapshotDataIntegrityImmediateCheckAfterSnapshotCreation: ~
            snapshotDataIntegrityCronjob: ~
            removeSnapshotsDuringFilesystemTrim: ~
            fastReplicaRebuildEnabled: ~
            replicaFileSyncHttpClientTimeout: ~
          privateRegistry:
            createSecret: ~
            registryUrl: ~
            registryUser: ~
            registryPasswd: ~
            registrySecret: ~

          longhornManager:
            log:
              format: plain
          longhornUI:
            replicas: 1
            nodeSelector:
              kubernetes.io/hostname: node-two
          longhornConversionWebhook:
            replicas: 1
            nodeSelector:
              kubernetes.io/hostname: node-two
          longhornAdmissionWebhook:
            replicas: 1
            nodeSelector:
              kubernetes.io/hostname: node-two
          longhornRecoveryBackend:
            replicas: 1
            nodeSelector:
              kubernetes.io/hostname: node-two
          ingress:
            enabled: false

  destination:
    namespace: longhorn-system
    name: in-cluster
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
      allowEmpty: true
    syncOptions:
    - Validate=false
    - CreateNamespace=true
    - PrunePropagationPolicy=background
    - PruneLast=true
    - ApplyOutOfSyncOnly=false
    - Prune=true
    retry:
      limit: 10
      backoff:
        duration: 5s
        factor: 2
        maxDuration: 3m
