apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: vault
spec:
  project: apps
  source:
    repoURL: https://github.com/hashicorp/vault-helm.git
    targetRevision: v0.23.0
    path: .
    helm:
      releaseName: vault
      values: |
        global:
          serverTelemetry:
            prometheusOperator: true
          enabled: true
          imagePullSecrets: []
          tlsDisable: true
          openshift: false
          psp:
            enable: false
            annotations: |
              seccomp.security.alpha.kubernetes.io/allowedProfileNames: docker/default,runtime/default
              apparmor.security.beta.kubernetes.io/allowedProfileNames: runtime/default
              seccomp.security.alpha.kubernetes.io/defaultProfileName:  runtime/default
              apparmor.security.beta.kubernetes.io/defaultProfileName:  runtime/default
        injector:
          enabled: true
          replicas: 1
          port: 8080
          leaderElector:
            enabled: true
          metrics:
            enabled: true
          externalVaultAddr: ""
          image:
            repository: "hashicorp/vault-k8s"
            tag: "1.0.1"
            pullPolicy: IfNotPresent
          agentImage:
            repository: "hashicorp/vault"
            tag: "1.12.0"
          agentDefaults:
            cpuLimit: "150m"
            cpuRequest: "50m"
            memLimit: "128Mi"
            memRequest: "64Mi"
            template: "map"
          templateConfig:
              exitOnRetryFailure: true
              staticSecretRenderInterval: ""
          authPath: "auth/kubernetes"
          logLevel: "info"
          logFormat: "standard"
          revokeOnShutdown: false
          namespaceSelector: {}
          objectSelector: {}
          failurePolicy: Ignore
          webhookAnnotations: {}
          certs:
            secretName: null
            caBundle: ""
            certName: tls.crt
            keyName: tls.key
          resources:
            requests:
              memory: 128Mi
              cpu: 50m
            limits:
              memory: 256Mi
              cpu: 150m
          extraEnvironmentVars: {}
          affinity: |
            podAntiAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                - labelSelector:
                    matchLabels:
                      app.kubernetes.io/name: {{ template "vault.name" . }}-agent-injector
                      app.kubernetes.io/instance: "{{ .Release.Name }}"
                      component: webhook
                  topologyKey: kubernetes.io/hostname
          tolerations: []
          nodeSelector:
            kubernetes.io/arch: amd64
            kubernetes.io/hostname: node-one
          priorityClassName: ""
          annotations:
            reloader.stakater.com/auto: "true"
          extraLabels: {}
          hostNetwork: false
          service:
            annotations: {}
          podDisruptionBudget: {}
        strategy:
          type: Recreate
        server:
          enabled: true
          image:
            repository: "hashicorp/vault"
            tag: "1.12.0"
            pullPolicy: IfNotPresent
          updateStrategyType: "OnDelete"
          logLevel: ""
          logFormat: ""
          resources:
            requests:
              memory: 128Mi
              cpu: 50m
            limits:
              memory: 256Mi
              cpu: 150m
          ingress:
            enabled: false
          route:
            enabled: false
            activeService: true
            labels: {}
            annotations: {}
            host: chart-example.local
          authDelegator:
            enabled: true
          extraInitContainers: null
            # # This example installs a plugin pulled from github into the /usr/local/libexec/vault/oauthapp folder,
            # # which is defined in the volumes value.
            # - name: oauthapp
            #   image: "alpine"
            #   command: [sh, -c]
            #   args:
            #     - cd /tmp &&
            #       wget https://github.com/puppetlabs/vault-plugin-secrets-oauthapp/releases/download/v1.2.0/vault-plugin-secrets-oauthapp-v1.2.0-linux-amd64.tar.xz -O oauthapp.xz &&
            #       tar -xf oauthapp.xz &&
            #       mv vault-plugin-secrets-oauthapp-v1.2.0-linux-amd64 /usr/local/libexec/vault/oauthapp &&
            #       chmod +x /usr/local/libexec/vault/oauthapp
            #   volumeMounts:
            #     - name: plugins
            #       mountPath: /usr/local/libexec/vault

          extraContainers: []
          shareProcessNamespace: true
          extraArgs: ""
          readinessProbe:
            enabled: true
            failureThreshold: 2
            initialDelaySeconds: 30
            periodSeconds: 15
            successThreshold: 1
            timeoutSeconds: 5
          livenessProbe:
            enabled: false
            path: "/v1/sys/health?standbyok=true"
            failureThreshold: 3
            initialDelaySeconds: 120
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          terminationGracePeriodSeconds: 60
          preStopSleepSeconds: 5
          postStart: []
          # - /bin/sh
          # - -c
          # - /vault/userconfig/myscript/run.sh
          # extraEnvironmentVars is a list of extra environment variables to set with the stateful set. These could be
          # used to include variables required for auto-unseal.
          extraEnvironmentVars: {}
          extraSecretEnvironmentVars: []

          # Deprecated: please use 'volumes' instead.
          # extraVolumes is a list of extra volumes to mount. These will be exposed
          # to Vault in the path `/vault/userconfig/<name>/`. The value below is
          # an array of objects, examples are shown below.
          extraVolumes: []
            # - type: secret (or "configMap")
            #   name: my-secret
            #   path: null # default is `/vault/userconfig`

          # volumes is a list of volumes made available to all containers. These are rendered
          # via toYaml rather than pre-processed like the extraVolumes value.
          # The purpose is to make it easy to share volumes between containers.
          volumes: null
          #   - name: plugins
          #     emptyDir: {}

          # volumeMounts is a list of volumeMounts for the main server container. These are rendered
          # via toYaml rather than pre-processed like the extraVolumes value.
          # The purpose is to make it easy to share volumes between containers.
          volumeMounts: null
          #   - mountPath: /usr/local/libexec/vault
          #     name: plugins
          #     readOnly: true

          # Affinity Settings
          # Commenting out or setting as empty the affinity variable, will allow
          # deployment to single node services such as Minikube
          # This should be either a multi-line string or YAML matching the PodSpec's affinity field.
          affinity: |
            podAntiAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                - labelSelector:
                    matchLabels:
                      app.kubernetes.io/name: {{ template "vault.name" . }}
                      app.kubernetes.io/instance: "{{ .Release.Name }}"
                      component: server
                  topologyKey: kubernetes.io/hostname
          # Toleration Settings for server pods
          # This should be either a multi-line string or YAML matching the Toleration array
          # in a PodSpec.
          tolerations: []
          nodeSelector:
            kubernetes.io/arch: amd64
            kubernetes.io/hostname: node-one
          networkPolicy:
            enabled: false
            egress: []
          # Priority class for server pods
          priorityClassName: ""
          extraLabels: {}
          annotations:
            reloader.stakater.com/auto: "true"
          service:
            enabled: true
            type: ClusterIP
            externalTrafficPolicy: Cluster
            port: 8200
            targetPort: 8200
            annotations: {}
          dataStorage:
            enabled: true
            size: 5Gi
            mountPath: "/vault/data"
            storageClass: iscsi
            accessMode: ReadWriteOnce
            annotations: {}
          # See https://www.vaultproject.io/docs/audit/index.html to know more
          auditStorage:
            enabled: false
            # Size of the PVC created
            size: 5Gi
            # Location where the PVC will be mounted.
            mountPath: "/vault/audit"
            # Name of the storage class to use.  If null it will use the
            # configured default Storage Class.
            storageClass: iscsi
            # Access Mode of the storage device being used for the PVC
            accessMode: ReadWriteOnce
            # Annotations to apply to the PVC
            annotations: {}

          dev:
            enabled: false

            # Set VAULT_DEV_ROOT_TOKEN_ID value
            devRootToken: "root"

          # Run Vault in "standalone" mode. This is the default mode that will deploy if
          # no arguments are given to helm. This requires a PVC for data storage to use
          # the "file" backend.  This mode is not highly available and should not be scaled
          # past a single replica.
          standalone:
            enabled: "-"
            config: |
              ui = true
              listener "tcp" {
                tls_disable = 1
                address = "[::]:8200"
                cluster_address = "[::]:8201"
                telemetry {
                  unauthenticated_metrics_access = "true"
                }
              }
              storage "file" {
                path = "/vault/data"
              }
              telemetry {
                prometheus_retention_time = "30s",
                disable_hostname = true
              }
              # Example configuration for using auto-unseal, using Google Cloud KMS. The
              # GKMS keys must already exist, and the cluster must have a service account
              # that is authorized to access GCP KMS.
              #seal "gcpckms" {
              #   project     = "vault-helm-dev"
              #   region      = "global"
              #   key_ring    = "vault-helm-unseal-kr"
              #   crypto_key  = "vault-helm-unseal-key"
              #}
          # Run Vault in "HA" mode. There are no storage requirements unless audit log
          # persistence is required.  In HA mode Vault will configure itself to use Consul
          # for its storage backend.  The default configuration provided will work the Consul
          # Helm project by default.  It is possible to manually configure Vault to use a
          # different HA backend.
          ha:
            enabled: false
            replicas: 3

            # Set the api_addr configuration for Vault HA
            # See https://www.vaultproject.io/docs/configuration#api_addr
            # If set to null, this will be set to the Pod IP Address
            apiAddr: null

            # Enables Vault's integrated Raft storage.  Unlike the typical HA modes where
            # Vault's persistence is external (such as Consul), enabling Raft mode will create
            # persistent volumes for Vault to store data according to the configuration under server.dataStorage.
            # The Vault cluster will coordinate leader elections and failovers internally.
            raft:

              # Enables Raft integrated storage
              enabled: false
              # Set the Node Raft ID to the name of the pod
              setNodeId: false

              # Note: Configuration files are stored in ConfigMaps so sensitive data
              # such as passwords should be either mounted through extraSecretEnvironmentVars
              # or through a Kube secret.  For more information see:
              # https://www.vaultproject.io/docs/platform/k8s/helm/run#protecting-sensitive-vault-configurations
              config: |
                ui = true
                listener "tcp" {
                  tls_disable = 1
                  address = "[::]:8200"
                  cluster_address = "[::]:8201"
                }
                storage "raft" {
                  path = "/vault/data"
                }
                service_registration "kubernetes" {}
            # config is a raw string of default configuration when using a Stateful
            # deployment. Default is to use a Consul for its HA storage backend.
            # This should be HCL.

            # Note: Configuration files are stored in ConfigMaps so sensitive data
            # such as passwords should be either mounted through extraSecretEnvironmentVars
            # or through a Kube secret.  For more information see:
            # https://www.vaultproject.io/docs/platform/k8s/helm/run#protecting-sensitive-vault-configurations
            config: |
              ui = true
              listener "tcp" {
                tls_disable = 1
                address = "[::]:8200"
                cluster_address = "[::]:8201"
              }
              storage "consul" {
                path = "vault"
                address = "HOST_IP:8500"
              }
              service_registration "kubernetes" {}
              # Example configuration for using auto-unseal, using Google Cloud KMS. The
              # GKMS keys must already exist, and the cluster must have a service account
              # that is authorized to access GCP KMS.
              #seal "gcpckms" {
              #   project     = "vault-helm-dev-246514"
              #   region      = "global"
              #   key_ring    = "vault-helm-unseal-kr"
              #   crypto_key  = "vault-helm-unseal-key"
              #}
            # A disruption budget limits the number of pods of a replicated application
            # that are down simultaneously from voluntary disruptions
            disruptionBudget:
              enabled: true

            # maxUnavailable will default to (n/2)-1 where n is the number of
            # replicas. If you'd like a custom value, you can specify an override here.
              maxUnavailable: null

          # Definition of the serviceAccount used to run Vault.
          # These options are also used when using an external Vault server to validate
          # Kubernetes tokens.
          serviceAccount:
            # Specifies whether a service account should be created
            create: true
            # The name of the service account to use.
            # If not set and create is true, a name is generated using the fullname template
            name: ""
            # Extra annotations for the serviceAccount definition. This can either be
            # YAML or a YAML-formatted multi-line templated string map of the
            # annotations to apply to the serviceAccount.
            annotations: {}

          # Settings for the statefulSet used to run Vault.
          statefulSet:
            # Extra annotations for the statefulSet. This can either be YAML or a
            # YAML-formatted multi-line templated string map of the annotations to apply
            # to the statefulSet.
            annotations: {}

        # Vault UI
        ui:
          enabled: true
          publishNotReadyAddresses: true
          activeVaultPodOnly: false
          serviceType: "ClusterIP"
          serviceNodePort: null
          externalPort: 8200
          targetPort: 8200
        csi:
          enabled: false
        serverTelemetry:
          serviceMonitor:
            enabled: true
            selectors: {}
            interval: 30s
            scrapeTimeout: 10s

  destination:
    namespace: vault
    name: in-cluster
  syncPolicy:
    automated:
      prune: true
      selfHeal: false
      allowEmpty: true
    syncOptions:
    - Validate=false
    - CreateNamespace=true
    - PrunePropagationPolicy=foreground
    - PruneLast=true
    - ApplyOutOfSyncOnly=false
    - Prune=true
    retry:
      limit: 5
      backoff:
        duration: 5s
        factor: 2
        maxDuration: 3m
  ignoreDifferences:
  - group: admissionregistration.k8s.io
    kind: MutatingWebhookConfiguration
    jsonPointers:
      - /webhooks
  - group: apps
    kind: Deployment
    jsonPointers:
    - /spec/replicas
